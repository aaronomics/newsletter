pswr = permutations(n, r, v=x, rep=T)
#Ai
means.pswr = apply(pswr, 1, mean)
#Aii
mean.means.pswr = mean(means.pswr)
#Aiii
var.means.pswr = var(means.pswr)*((n-1)/n)
list(Apopmean = m, Apopvar = v, Amean.means.pswr = mean.means.pswr, Avar.means.pswr = var.means.pswr, Avarx.dbr = vdbr)
#B
pswor = permutations(n, r, v=x, rep=F)
#Bi
means.pswor = apply(pswor, 1, mean)
#Bii
mean.means.pswor = mean(means.pswor)
#Biii
var.means.pswor = var(means.pswor)*((n-1)/n)
list(Bpopmean = m, Bpopvar = v, Bmean.means.pswor = mean.means.pswor, Bvar.means.pswor = var.means.pswor, Bvarx.wor = vwor)
#C
cswor = combinations(n, r, v=x, rep=F)
#Ci
means.cswor = apply(cswor, 1, mean)
#Cii
mean.means.cswor = mean(means.cswor)
#Ciii
var.means.cswor = var(means.cswor)*((n-1)/n)
list(Cpopmean = m, Cpopvar = v, Cmean.means.cswor = mean.means.cswor, Cvar.means.cswor = Cvar.means.cswor, Cvarx.wor = vwor)
x = c(1, 2, 3, 4, 5)
m = mean(x)
n = length(x)
r = 2
v = var(x)*((n-1)/n)
vdbr = v/r
vwor = v/r*((n-r)/(n-1))
#A
pswr = permutations(n, r, v=x, rep=T)
#Ai
means.pswr = apply(pswr, 1, mean)
#Aii
mean.means.pswr = mean(means.pswr)
#Aiii
var.means.pswr = var(means.pswr)*((n-1)/n)
list(Apopmean = m, Apopvar = v, Amean.means.pswr = mean.means.pswr, Avar.means.pswr = var.means.pswr, Avarx.dbr = vdbr)
#B
pswor = permutations(n, r, v=x, rep=F)
#Bi
means.pswor = apply(pswor, 1, mean)
#Bii
mean.means.pswor = mean(means.pswor)
#Biii
var.means.pswor = var(means.pswor)*((n-1)/n)
list(Bpopmean = m, Bpopvar = v, Bmean.means.pswor = mean.means.pswor, Bvar.means.pswor = var.means.pswor, Bvarx.wor = vwor)
#C
cswor = combinations(n, r, v=x, rep=F)
#Ci
means.cswor = apply(cswor, 1, mean)
#Cii
mean.means.cswor = mean(means.cswor)
#Ciii
var.means.cswor = var(means.cswor)*((n-1)/n)
list(Cpopmean = m, Cpopvar = v, Cmean.means.cswor = mean.means.cswor, Cvar.means.cswor = var.means.cswor, Cvarx.wor = vwor)
x = c(21, 18, 19, 17, 15)
m = mean(x)
n = length(x)
r = 2
v = var(x)*((n-1)/n)
vdbr = v/r
vwor = v/r*((n-r)/(n-1))
#A
pswr = permutations(n, r, v=x, rep=T)
#Ai
means.pswr = apply(pswr, 1, mean)
#Aii
mean.means.pswr = mean(means.pswr)
#Aiii
var.means.pswr = var(means.pswr)*((n-1)/n)
list(Apopmean = m, Apopvar = v, Amean.means.pswr = mean.means.pswr, Avar.means.pswr = var.means.pswr, Avarx.dbr = vdbr)
#B
pswor = permutations(n, r, v=x, rep=F)
#Bi
means.pswor = apply(pswor, 1, mean)
#Bii
mean.means.pswor = mean(means.pswor)
#Biii
var.means.pswor = var(means.pswor)*((n-1)/n)
list(Bpopmean = m, Bpopvar = v, Bmean.means.pswor = mean.means.pswor, Bvar.means.pswor = var.means.pswor, Bvarx.wor = vwor)
#C
cswor = combinations(n, r, v=x, rep=F)
#Ci
means.cswor = apply(cswor, 1, mean)
#Cii
mean.means.cswor = mean(means.cswor)
#Ciii
var.means.cswor = var(means.cswor)*((n-1)/n)
list(Cpopmean = m, Cpopvar = v, Cmean.means.cswor = mean.means.cswor, Cvar.means.cswor = var.means.cswor, Cvarx.wor = vwor)
library(gtools)
install.packages("TinyTeX")
library(gtools)
install.packages("tinytex")
library(gtools)
install.packages("tinytex")
install.packages("tinytex")
install.packages("tinytex")
install.packages("tinytex")
install.packages("tinytex")
library(gtools)
tinytex::install_tinytex()
library(gtools)
tinytex::install_tinytex()
knitr::opts_chunk$set(echo = TRUE, comment = "")
knitr::opts_chunk$set(echo = TRUE, comment = "")
x = c(1, 2, 3, 4, 5)
m = mean(x)
n = length(x)
r = 2
v = var(x)*((n-1)/n)
vdbr = v/r
vwor = v/r*((n-r)/(n-1))
#A
pswr = permutations(n, r, v=x, rep=T)
library(gtools)
x=c(1, 2, 3, 4)
n = length(x)
r = 2
#A
p1a = permutations(n,r,v=x, rep=T)
length(p1a)
#B
p1b = permutations(n,r,v=x, rep=F)
length(p1b)
#C
p1c = combinations(n,r,v=x, rep=T)
length(p1c)
#D
p1d = combinations(n,r,v=x, rep=F)
length(p1d)
x = c(1, 2, 3, 4, 5)
m = mean(x)
n = length(x)
r = 2
v = var(x)*((n-1)/n)
vdbr = v/r
vwor = v/r*((n-r)/(n-1))
#A
pswr = permutations(n, r, v=x, rep=T)
na = nrow(pswr)
#Ai
means.pswr = apply(pswr, 1, mean)
#Aii
mean.means.pswr = mean(means.pswr)
#Aiii
var.means.pswr = var(means.pswr)*((na-1)/na)
list(Apopmean = m, Apopvar = v, Amean.means.pswr = mean.means.pswr, Avar.means.pswr = var.means.pswr, Avarx.dbr = vdbr)
#B
pswor = permutations(n, r, v=x, rep=F)
#Bi
means.pswor = apply(pswor, 1, mean)
#Bii
mean.means.pswor = mean(means.pswor)
#Biii
var.means.pswor = var(means.pswor)*((n-1)/n)
list(Bpopmean = m, Bpopvar = v, Bmean.means.pswor = mean.means.pswor, Bvar.means.pswor = var.means.pswor, Bvarx.wor = vwor)
#C
cswor = combinations(n, r, v=x, rep=F)
#Ci
means.cswor = apply(cswor, 1, mean)
#Cii
mean.means.cswor = mean(means.cswor)
#Ciii
var.means.cswor = var(means.cswor)*((n-1)/n)
list(Cpopmean = m, Cpopvar = v, Cmean.means.cswor = mean.means.cswor, Cvar.means.cswor = var.means.cswor, Cvarx.wor = vwor)
x = c(1, 2, 3, 4, 5)
m = mean(x)
n = length(x)
r = 2
v = var(x)*((n-1)/n)
vdbr = v/r
vwor = v/r*((n-r)/(n-1))
#A
pswr = permutations(n, r, v=x, rep=T)
na = nrow(pswr)
#Ai
means.pswr = apply(pswr, 1, mean)
#Aii
mean.means.pswr = mean(means.pswr)
#Aiii
var.means.pswr = var(means.pswr)*((na-1)/na)
list(Apopmean = m, Apopvar = v, Amean.means.pswr = mean.means.pswr, Avar.means.pswr = var.means.pswr, Avarx.dbr = vdbr)
#B
pswor = permutations(n, r, v=x, rep=F)
nb = nrow(pswor)
#Bi
means.pswor = apply(pswor, 1, mean)
#Bii
mean.means.pswor = mean(means.pswor)
#Biii
var.means.pswor = var(means.pswor)*((nb-1)/nb)
list(Bpopmean = m, Bpopvar = v, Bmean.means.pswor = mean.means.pswor, Bvar.means.pswor = var.means.pswor, Bvarx.wor = vwor)
#C
cswor = combinations(n, r, v=x, rep=F)
#Ci
means.cswor = apply(cswor, 1, mean)
#Cii
mean.means.cswor = mean(means.cswor)
#Ciii
var.means.cswor = var(means.cswor)*((n-1)/n)
list(Cpopmean = m, Cpopvar = v, Cmean.means.cswor = mean.means.cswor, Cvar.means.cswor = var.means.cswor, Cvarx.wor = vwor)
x = c(1, 2, 3, 4, 5)
m = mean(x)
n = length(x)
r = 2
v = var(x)*((n-1)/n)
vdbr = v/r
vwor = v/r*((n-r)/(n-1))
#A
pswr = permutations(n, r, v=x, rep=T)
na = nrow(pswr)
#Ai
means.pswr = apply(pswr, 1, mean)
#Aii
mean.means.pswr = mean(means.pswr)
#Aiii
var.means.pswr = var(means.pswr)*((na-1)/na)
list(Apopmean = m, Apopvar = v, Amean.means.pswr = mean.means.pswr, Avar.means.pswr = var.means.pswr, Avarx.dbr = vdbr)
#B
pswor = permutations(n, r, v=x, rep=F)
nb = nrow(pswor)
#Bi
means.pswor = apply(pswor, 1, mean)
#Bii
mean.means.pswor = mean(means.pswor)
#Biii
var.means.pswor = var(means.pswor)*((nb-1)/nb)
list(Bpopmean = m, Bpopvar = v, Bmean.means.pswor = mean.means.pswor, Bvar.means.pswor = var.means.pswor, Bvarx.wor = vwor)
#C
cswor = combinations(n, r, v=x, rep=F)
nc = nrow(cswor)
#Ci
means.cswor = apply(cswor, 1, mean)
#Cii
mean.means.cswor = mean(means.cswor)
#Ciii
var.means.cswor = var(means.cswor)*((nc-1)/nc)
list(Cpopmean = m, Cpopvar = v, Cmean.means.cswor = mean.means.cswor, Cvar.means.cswor = var.means.cswor, Cvarx.wor = vwor)
x = c(21, 18, 19, 17, 15)
m = mean(x)
n = length(x)
r = 2
v = var(x)*((n-1)/n)
vdbr = v/r
vwor = v/r*((n-r)/(n-1))
#A
pswr = permutations(n, r, v=x, rep=T)
na = nrow(pswr)
#Ai
means.pswr = apply(pswr, 1, mean)
#Aii
mean.means.pswr = mean(means.pswr)
#Aiii
var.means.pswr = var(means.pswr)*((na-1)/na)
list(Apopmean = m, Apopvar = v, Amean.means.pswr = mean.means.pswr, Avar.means.pswr = var.means.pswr, Avarx.dbr = vdbr)
#B
pswor = permutations(n, r, v=x, rep=F)
nb = nrow(pswor)
#Bi
means.pswor = apply(pswor, 1, mean)
#Bii
mean.means.pswor = mean(means.pswor)
#Biii
var.means.pswor = var(means.pswor)*((nb-1)/nb)
list(Bpopmean = m, Bpopvar = v, Bmean.means.pswor = mean.means.pswor, Bvar.means.pswor = var.means.pswor, Bvarx.wor = vwor)
#C
cswor = combinations(n, r, v=x, rep=F)
nc = nrow(cswor)
#Ci
means.cswor = apply(cswor, 1, mean)
#Cii
mean.means.cswor = mean(means.cswor)
#Ciii
var.means.cswor = var(means.cswor)*((nc-1)/nc)
list(Cpopmean = m, Cpopvar = v, Cmean.means.cswor = mean.means.cswor, Cvar.means.cswor = var.means.cswor, Cvarx.wor = vwor)
x = c(21, 18, 19, 17, 15)
m = mean(x)
n = length(x)
r = 2
v = var(x)*((n-1)/n)
vdbr = v/r
vwor = v/r*((n-r)/(n-1))
#A
pswr = permutations(n, r, v=x, rep=T)
na = nrow(pswr)
#Ai
means.pswr = apply(pswr, 1, mean)
#Aii
mean.means.pswr = mean(means.pswr)
#Aiii
var.means.pswr = var(means.pswr)*((na-1)/na)
list(Apopmean = m, Apopvar = v, Amean.means.pswr = mean.means.pswr, Avar.means.pswr = var.means.pswr, Avarx.dbr = vdbr)
#B
pswor = permutations(n, r, v=x, rep=F)
nb = nrow(pswor)
#Bi
means.pswor = apply(pswor, 1, mean)
#Bii
mean.means.pswor = mean(means.pswor)
#Biii
var.means.pswor = var(means.pswor)*((nb-1)/nb)
list(Bpopmean = m, Bpopvar = v, Bmean.means.pswor = mean.means.pswor, Bvar.means.pswor = var.means.pswor, Bvarx.wor = vwor)
#C
cswor = combinations(n, r, v=x, rep=F)
nc = nrow(cswor)
#Ci
means.cswor = apply(cswor, 1, mean)
#Cii
mean.means.cswor = mean(means.cswor)
#Ciii
var.means.cswor = var(means.cswor)*((nc-1)/nc)
list(Cpopmean = m, Cpopvar = v, Cmean.means.cswor = mean.means.cswor, Cvar.means.cswor = var.means.cswor, Cvarx.wor = vwor)
x=c(1, 2, 3, 4)
n = length(x)
r = 2
#A
p1a = permutations(n,r,v=x, rep=T, set=F)
length(p1a)
#B
p1b = permutations(n,r,v=x, rep=F, set = T)
length(p1b)
#C
p1c = combinations(n,r,v=x, rep=T)
length(p1c)
#D
p1d = combinations(n,r,v=x, rep=F)
length(p1d)
x=c(1, 2, 3, 4)
n = length(x)
r = 2
#A
p1a = permutations(n, r, v=x, rep=T, set=F)
length(p1a)
#B
p1b = permutations(n, r, v=x, rep=F, set = T)
length(p1b)
#C
p1c = combinations(n, r, v=x, rep=T, set=F)
length(p1c)
#D
p1d = combinations(n, r, v=x, rep=F,set = T)
length(p1d)
x=c(1, 2, 3, 4)
n = length(x)
r = 2
#A
p1a = permutations(n, r, v=x, rep=T, set=F)
p1a
#B
p1b = permutations(n, r, v=x, rep=F, set = T)
length(p1b)
#C
p1c = combinations(n, r, v=x, rep=T, set=F)
length(p1c)
#D
p1d = combinations(n, r, v=x, rep=F,set = T)
length(p1d)
x=c(1, 2, 3, 4)
n = length(x)
r = 2
#A
p1a = permutations(n, r, v=x, rep=T, set=F)
nrow(p1a)
#B
p1b = permutations(n, r, v=x, rep=F, set = T)
nrow(p1b)
#C
p1c = combinations(n, r, v=x, rep=T, set=F)
nrow(p1c)
#D
p1d = combinations(n, r, v=x, rep=F,set = T)
nrow(p1d)
sin(5pi/6)
sin(5*pi/6)
install.packages("tidyverse")
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
library(tidyverse)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
library(tidyverse)
mtcars
select(mtcars, carb)
mtcars
select(mtcars, mpg, cyl)
mt_small
mt_small = mtcars[1:5, 1:3]
mt_small
rowSums(mt_small)
mt_small %>% rowSums()
rowSums(mt_small)
mt_small = mtcars[1:5, 1:3]
mt_small
rowSums(mt_small)
mt_small %>% rowSums()
# well, I really like this select function, pretty nifty
select(mtcars, mpg, cyl)
mtcars
mtcars
# well, I really like this select function, pretty nifty
select(mtcars, mpg, cyl)
# well, I really like this select function, pretty nifty
select(mtcars, mpg, cyl, hp)
# well, I really like this select function, pretty nifty
small = select(mtcars, mpg, cyl, hp)
small
# well, I really like this select function, pretty nifty
select(mtcars, mpg, cyl, hp)
mtcars
# well, I really like this select function, pretty nifty, and can be assigned to a new variable. wonder if that's an R function or tidyverse
select(mtcars, mpg, cyl, hp)
rowSums(mt_small)
mean(rowSums(mt_small))
mt_small %>% rowSums()
mt_small %>% rowSums() %>% mean()
mtcars
mtcars = as.data.frame(mtcards)
mtcars = as.data.frame(mtcars)
mtcars
#dataframes are made of vectors
#mtcars = as.data.frame(mtcars)
mtcars
#mtcars = as.data.frame(mtcars)
mtcars$gear
#dataframes are made of vectors
#mtcars = as.data.frame(mtcars)
mtcars$gear
mtcars$mpg
mtcars$mpg %>% length()
x = c(4,5,6,89,7,5,3)
y = 1:7
dat = data_frame(x, y)
dat
mtcars
#dataframes are made of vectors
mtcars = as_data_frame(mtcars)
mtcars
mtcars$gear
mtcars$mpg %>% length()
#we can create a dataframe from vetors
x = c(4,5,6,89,7,5,3)
y = 1:7
dat = data_frame(x, y)
dat
lst = list(y, z)
#dataframes are made of vectors
mtcars = as_data_frame(mtcars)
mtcars
mtcars$gear
mtcars$mpg %>% length()
#we can create a dataframe from vetors
x = c(4,5,6,89,7,5,3)
y = 1:7
dat = data_frame(x, y)
dat
#list can hold vectors of different lengths
z = 1:10
lst = list(y, z)
lst
#dataframes are made of vectors
mtcars = as_data_frame(mtcars)
mtcars
mtcars$gear
mtcars$mpg %>% length()
#we can create a dataframe from vetors
x = c(4,5,6,89,7,5,3)
y = 1:7
dat = data_frame(x, y)
dat
#list can hold vectors of different lengths
z = 1:10
lst = list(y, z)
lst
lst[[1]] #returns y
lst[[2]] #returns z
knitr::opts_chunk$set(echo = TRUE, warning = F, message = F)
install.packages("ws")
install.packages(c("tidyverse", "keras", "caret"))
install.packages(c("tidyverse", "keras", "caret"))
install.packages(c("tidyverse", "keras", "caret"))
install.packages(c("tidyverse", "keras", "caret"))
install.packages(c("tidyverse", "keras", "caret"))
install.packages(c("tidyverse", "keras", "caret"))
install.packages(c("tidyverse", "keras", "caret"))
install.packages(c("tidyverse", "keras", "caret"))
install.packages(c("tidyverse", "keras", "caret"))
install.packages(c("tidyverse", "keras", "caret"))
install.packages(c("tidyverse", "keras", "caret"))
knitr::opts_chunk$set(echo = TRUE, warning = F, message = F)
library(caret)
library(ws)
library(ws)
#library(ws)
library(tidyverse)
library(tidyverse)
library(keras)
library(keras)
library(caret)
#library(ws)
library(tidyverse)
install.packages(c("blob", "broom", "colorspace", "crayon", "DBI", "dbplyr", "digest", "dplyr", "evaluate", "fansi", "farver", "ggplot2", "gtools", "haven", "httr", "IRdisplay", "IRkernel", "jsonlite", "knitr", "lifecycle", "magrittr", "mime", "mnormt", "openssl", "packrat", "pbdZMQ", "processx", "ps", "psych", "RColorBrewer", "Rcpp", "reactable", "repr", "rlang", "rmarkdown", "rsconnect", "scales", "stringi", "tidyr", "tinytex", "uuid", "withr", "xfun", "yaml"))
install.packages(c("blob", "broom", "colorspace", "crayon", "DBI", "dbplyr", "digest", "dplyr", "evaluate", "fansi", "farver", "ggplot2", "gtools", "haven", "httr", "IRdisplay", "IRkernel", "jsonlite", "knitr", "lifecycle", "magrittr", "mime", "mnormt", "openssl", "packrat", "pbdZMQ", "processx", "ps", "psych", "RColorBrewer", "Rcpp", "reactable", "repr", "rlang", "rmarkdown", "rsconnect", "scales", "stringi", "tidyr", "tinytex", "uuid", "withr", "xfun", "yaml"))
knitr::opts_chunk$set(echo = TRUE, warning = F, message = F)
#library(ws)
library(tidyverse)
install.packages("tidyverse")
library(tidyverse)
ls()
getwd()
